Description: 15 Puzzle
Date: 15 FEB 2016
Author: Andrii Grytsenko
Programing Language: Python (on-line interpreter www.codeskulptor.org)

Section 1. Data structures
Name: lstPlaces (List of places)
Type: List (ordered)
Description: Contains 16 places for 15 Draughts (one place remains empty). 
Places have IDs from 0 to 15. In places we will store ID of draughts. 
Classicaly draughts numbered from 1 to 15. 
Here draughts will be internaly marked (have IDs) from 0 to 14.
During drawing draught's label we will add "1" to draught's ID.
Empty place will have ID 15. We will check this special number to draw an emply space instead of draught with label "16".
So desired state of a game will correspond to sorted list: 0, 1, 2, ..., 14, 15.
This state is equal to expression "Each place contains draught with ID that is equal to place's ID" (lstPlaces[i]==i).
Places are organized in four rows with four cells in each.
Row number is equal to [place ID / 4]: 0..3
Cell number is equal to [place ID % 4]: 0..3
Example 1: expression "lstPlaces[2] == 3" means "Draught with ID==3 (and with label=="4") now is laying at place with ID==2". Here row is 0 (2/4=0) and cell is 2 (2%4=2).
Example 2: expression "lstPlaces[10] == 15" means "Place with ID==10 is emply". Here row is 2 (10/4=2) and cell is 2 (10%4=2).

Name: lstMovablePlaces (List of places)
Type: List (ordered)
Description: Contains from 2 to 4 places from where is it possible to move draught to free place.

Name: iFreePlace
Type: integer
Description: ID of a free place. Can be computable.

Name: iMovements
Type: integer
Description: Movements were made since the start solving the current puzzle 

Name: PUZZLE_SIZE
Type: constant (integer)
Description: Amount of rows (and colls cause its are equal). In classical game it is equal to 4
/////////////////////////////

Section 2. Core functions

Section 2.1 public methods
Name: isOrdered
In: lst
Out: boolean
Description: Check if all graughts are at the right places. 
Simply to check if ID of place is equal to ID of draught at that place (lstPlaces[i] == i)

Name: isMovable
In: ID
Out: boolean
Description: Check if is it possible to move a draught from selected place to a free place. 
As we have a list of such places (lstMovableDraughts) the task is to check if selected ID is in the list.

Name: moveDraught
In: lstPlaces, "ID of place"
Out: none
Description: Exchange IDs of draughts at places "ID of place" and iFreePlace (lstPlaces["ID of place"] <==> lstPlaces[iFreePlace].
After that change the ID of free place (iFreePlace = "ID of place"), increase iMovements and fresh lstMovableDraughts.

Name: shuffle
In: none
Out: none
Description: Shuffle draughts in a list.

Section 2.2 private methods

Name: updateMovablePlaces
In: none
Out: none
Description: Update lstMovableDraughts by following next rules: 
there are only to draughts possibel to move to free place at corner;
there are three draughts possible to move to free place at the border;
there are four draughts possible to move to free place in middle.

Name: getID
In: row (integer), col (integer)
Out: ID (integer)
Description: Compute ID by given row and column numbers.

Name: getRow
In: ID (integer)
Out: row (integer)
Description: Compute row by given ID.

Name: getCol
In: ID (integer)
Out: col (integer)
Description: Compute column by given ID.
